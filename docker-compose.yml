version: "3.1"
services:

  user_db_host:
    image: postgres
    restart: on-failure
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DB: user_db
    volumes: 
      - ./userdb:/var/lib/postgresql/data
      - ./db/userInit.sql:/docker-entrypoint-initdb.d/userInit.sql
    networks:
      - cloud-services


  product_db_host:
    image: mongo
    restart: on-failure
    ports:
      - 27017:27017
    networks:
      - cloud-services

  order_db_host:
    image: postgres
    restart: on-failure
    ports:
      - 5100:5432
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DB: order_db
    volumes: 
      - ./orderdb:/var/lib/postgresql/data
      - ./db/orderInit.sql:/docker-entrypoint-initdb.d/orderInit.sql
    networks:
      - cloud-services



  user_service:
    restart: on-failure
    build: 
      context: ./users-service
      dockerfile: Dockerfile
    environment:
      - POSTGRES_URI=postgresql://postgres_user:postgres_pass@user_db_host:5432/user_db
    ports:
      - 3100:3100
    depends_on:
      - user_db_host
    command: npm run start
    networks:
      - cloud-services



  product_service:
    restart: on-failure
    build: 
      context: ./products-service
      dockerfile: Dockerfile
    ports:
      - 3200:3200
    depends_on:
      - product_db_host
    command: npm run start
    networks:
      - cloud-services



  order_service:
    restart: on-failure
    build: 
      context: ./orders-service
      dockerfile: Dockerfile
    environment:
      - POSTGRES_URI=postgresql://postgres_user:postgres_pass@order_db_host:5432/order_db
    ports:
      - 3300:3300
    depends_on:
      - order_db_host
    command: npm run start
    networks:
      - cloud-services


volumes:
  userdb:
    driver: local
  orderdb:
     driver: local


networks:
  cloud-services: