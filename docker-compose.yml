version: "3.1"
services:

  user_db_host:
    image: postgres
    restart: on-failure
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DB: user_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes: 
      - ./userdb:/var/lib/postgresql/data
      - ./db/userInit.sql:/docker-entrypoint-initdb.d/userInit.sql
    networks:
      - cloud-services


  product_db_host:
    image: mongo
    restart: on-failure
    ports:
      - 27017:27017
    networks:
      - cloud-services

  order_db_host:
    image: postgres
    restart: on-failure
    ports:
      - 5100:5432
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DB: order_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes: 
      - ./orderdb:/var/lib/postgresql/data
      - ./db/orderInit.sql:/docker-entrypoint-initdb.d/orderInit.sql
    networks:
      - cloud-services

  rabbitmq:
      image: rabbitmq
      ports:
        - 5672:5672
        - 15672:15672
      volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      networks:
      - cloud-services

  user_service:
    restart: on-failure
    build: 
      context: ./users-service
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DB: user_db
      POSTGRES_PORT: 5432
      POSTGRES_HOST: user_db_host
      POSTGRES_URI: postgresql://postgres_user:postgres_pass@user_db_host:5432/user_db?sslmode=disable
    ports:
      - 3100:3100
    depends_on:
      - user_db_host
    command: npm run start
    networks:
      - cloud-services


  product_service:
    restart: on-failure
    build: 
      context: ./products-service
      dockerfile: Dockerfile
    ports:
      - 3200:3200
    environment:
      MONGO_DB: mongo_db
      MONGO_HOST: product_db_host
      MONGO_URL: mongodb://mongo_db:27017/product_db_host
    depends_on:
      - product_db_host
    command: npm run start
    networks:
      - cloud-services

  order_service:
    restart: on-failure
    build: 
      context: ./orders-service
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DB: order_db
      POSTGRES_PORT: 5432
      POSTGRES_HOST: order_db_host
      POSTGRES_URI: postgresql://postgres_user:postgres_pass@order_db_host:5432/order_db?sslmode=disable
      AMQP_URL: amqp://guest:guest@rabbitmq:5672
    ports:
      - 3300:3300
    depends_on:
      - order_db_host
      - rabbitmq
    command: npm run start
    networks:
      - cloud-services

  shipping_service:
    restart: on-failure
    build: 
      context: ./shipping-service
      dockerfile: Dockerfile
    environment:
      AMQP_URL: amqp://rabbitmq:5672
    depends_on:
      - rabbitmq
    command: npm run start
    networks:
      - cloud-services

  nginx:
    restart: on-failure
    image: nginx
    ports:
      - 8080:8080
    depends_on:
      - user_service
      - product_service
      - order_service
      - shipping_service
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - cloud-services

volumes:
  userdb:  
  orderdb:
    driver: local


networks:
  cloud-services: